* Cookbook
** List all modules

In python shell: help('modules')

** find out what is in a module

module = __import__("abc")
for name in dir(module):
    print(name)

* Debugger

import pdb
pdb.set_trace()

Now run your program and it'll break at the 'set_trace' method.

* Basics

** Functions

Define a function:

```
def my-func(param):
    "Optional Documentation"
    print "hello"
```

* Modules

A module is a file containing Python definitions and statements. The
file name is the module name with the suffix .py appended.  

```python
import my_module
my_module.myFunction(23)
```

Imports file: `my_module.py`, with say, a function called
`myFunction(int)`.  Which is accessed as per above.

There is a variant of the import statement that imports names from a
module directly into the importing moduleâ€™s symbol table. For example:

```python
from my_module import myFunction
myFunction(23)
```

This does not introduce the module name, so `my_module` is not defined.

* current package management

Folder layout:

    |-- README.txt
    |-- test
    |   `-- test.py
    |-- setup.py
    `-- weechat_notifier
        |-- __init__.py
        `-- weechat_plugin.py
  
Contents of setup.py:

    from setuptools import setup
    the_version='0.1.4'
    setup(
        name = 'weechat_notifier',
        version = the_version,
        packages = ['weechat_notifier'],
        description = 'Weechat Notification Plugin',
        author='Fenton Travers',
        author_email='fenton.travers@gmail.com',
        url='https://pypi.python.org/packages/source/w/weechat_notifier/weechat_notifier-' + the_version + '.tar.gz',
        license='Creative Commons Attribution-Noncommercial-Share Alike license',
        long_description='A notification plugin for weechat',
        classifiers=[
            'Programming Language :: Python :: 3.3',
        ]
    )

Build the distribution:

    % python setup.py sdist

Upload to PyPi:

    % python setup.py sdist upload

* adding system commands

if I want to add additional system commands to linux using python i
use the following project and project structure:

    pscripts
    |-- pscripts
    |   |-- deployment.py
    |   `-- __init__.py
    |-- README.txt
    |-- scripts
    |   `-- inc-ver
    `-- setup.py

all the python code lives, primarily, in 'pscripts/pscripts/py'.  

The files under scripts are what I'd call on the command line.  In
this example I want to create a script that will automatically update
the version number inside of setup.py, so I don't need to do it
manually each time I release.

* 3to2

If you have a python 3.x compliant file you can convert to a 2.x
compliant file by using 3to2.

    % pip install 3to2
    % 3to2 test.py > test.diff

3to2 creates a patch, so apply it.

    % patch < test.diff

in the same folder as test.py.

* old package management (ignore)
** Package Management - Python Eggs

*** Debian Setup

```bash
$ sudo apt-get install python-setuptools
$ sudo easy_install -U PasteScript
```

*** Create Shell Project

```bash
$ paster create --list-templates
$ paster create -t basic_package
```

After responding to some questions, such as project name, we get a
folder created by the name we used for our project.  In this tutorial
my project name is: **it_library**.

*** Release Egg

You can create and upload the egg with:

```bash
$ cd it_library/
$ python setup.py bdist_egg register upload
Submitting dist/it_library-0.0.1dev-py2.7.egg to http://pypi.python.org/pypi
Server response (200): OK
```

*** New Egg Version

Update version info in `setup.py` and re-release.

*** Share with others

Have people go to [pypi.python.org](http://pypi.python.org/), and put
your project name into the search box at top right.

```bash
$ sudo easy_install -U it_library
```

*** Local testing

If you want to install and test any changes you made, do:

```bash
$ sudo python setup.py install
```


**NOTE**: My test project is called: **it_library**, replace this with the name
of your project.


*** References

** [Reference](http://wiki.python.org/moin/CheeseShopTutorial)
** [Python Eggs - Package Management](http://mrtopf.de/blog/en/a-small-introduction-to-python-eggs/)

# Language Reference

## Starting a Script

```python
##!/usr/bin/python
import sys
import os
def printHello(name):
    print "Hello: " + name
def goodbye(name)
```

Code blocks are **indented**.  To finish a code block un-indent.

## Command line arguments

```python
import sys
for arg in sys.argv:
    print arg
```

sys.argv is just a list

## Convert String -> Int -> String

```python
age = "12"
birthday = int(age) + 1
print "After your birthday you'll be: " + str(birthday)
```

## Files

### Reading

    f = open("../resources/htmlInputTestStrings.properties", 'r')
    for line in f:
        parts = string.split(line, '=')
        print parts

### Writing

    f = open("../resources/htmlInputTestStrings.properties", 'w')
    f.write("test")
    f.close()

## Switch / Case statements

    options = {0 : zero,
                1 : sqr,
                4 : sqr,
                9 : sqr,
                2 : even,
                3 : prime,
                5 : prime,
                7 : prime,
                }
    def zero():
        print "You typed zero.\n"
    def sqr():
        print "n is a perfect square\n"
    def even():
        print "n is an even number\n"
    def prime():
        print "n is a prime number\n"

Now that you have the switch case setup, you can actually use it by
simply doing a dictionary lookup:

    options[num]()

Thanks to the fact that Python functions are first class values, you
can use the functions as the values of the dictionary and then call
them via dictionary lookup.


## Data Types

### Lists

Empty list initialization
    
    myList = []

* The in operator can be used to check if an item is present in the list:

    if value in L:
        print "list contains", value

#### List functions

* size

Use `len(list)` to get length of a list.

* list.pop([i])

Remove the item at the given position in the list, and return it. If
no index is specified, a.pop() removes and returns the last item in
the list. (The square brackets around the i in the method signature
denote that the parameter is optional, not that you should type square
brackets at that position. You will see this notation frequently in
the Python Library Reference.)

### Dictionary

    tel = {'jack': 4098, 'sape': 4139}

#### Looping over Dictionaries

     hosts = { 'dev':'123', 'stg':'456' }
     for k, v in hosts.iteritems():

## Calling External Programs

* [Reference](http://www.doughellmann.com/PyMOTW/subprocess/)

### Get external program output

```python
import subprocess

output = subprocess.check_output(['ls', '-1'])
print 'Have %d bytes in output' % len(output)
print output
```

## Regex: Searching Strings

Code to extract string: version number: "0.3.0"

```python
import re
data = "<version>0.3.0-SNAPSHOT</version>"
matcher = re.compile("<version>(.*)-SNAPSHOT</version>", re.MULTILINE)
matched = matcher.search(data)
if matched != None:
  matched = matched.group(1)
```

`matched` should now contain the string: "0.3.0"

## global variables

```python
globvar = 0

def set_globvar_to_one():
    global globvar    # Needed to modify global copy of globvar
    globvar = 1

def print_globvar():
    print globvar     # No need for global declaration to read value of globvar

set_globvar_to_one()
print_globvar()       # Prints 1
```
* virtualenv




* pip

** requirements.txt - freeze

   When you want to stabalize your application it is helpful to freeze
   your dependencies.  In your application do:

       % pip freeze > stable-req.txt
