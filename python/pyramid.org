* start project
** create

This time lets use `starter`, naming our project `pyr1`.

    % pcreate -s starter pyr1

NOTE: to see a list of project types do:

    % pcreate --list
** install

    % cd pyr1
    % python setup.py develop

** run

   % pserve development.ini

** set port

In `<proj>/development.ini` we have a section like:

    [server:main]
    host = 0.0.0.0
    port = 6543

* routes

In `<proj>/<proj>/__init__.py` we put:

    from pyramid.config import Configurator
    def main(global_config, **settings):
        config = Configurator(settings=settings)
        config.add_route('hello', '/')
        config.scan()
        return config.make_wsgi_app()

This means the root url will resolve to the view: `hello` 

* views

In `<proj>/<proj>/views.py` put:

    from pyramid.response import Response
    from pyramid.view import view_config
    @view_config(route_name='hello')
    def hello_world(request):
        return Response('Hello')

* templating
** basics

Extend the view annotation to add a template

    @view_config(route_name='home', renderer='templates/t1.pt')
    def my_view(request):
        return {'project': 'annie'}

This returns a hashtable to the template with the single key: project,
with it's value being 'annie'.  This can then be used in a template
like so:

    <h1>Project: ${project}</h1>

** Generic Layout Templates

Often you'll want to have one file that is the generic layout of your
website and it will have sections that get filled in, like the body.
It will define the header/footer/navigation, etc.

To achieve that first lets create the generic layout template in the
file: `<proj>/<proj>/templates/base_layout.pt`

    <html>
      <body>
        <div metal:define-slot="content"></div> 
      </body>
    </html>

Then we can use this layout template to create an 'about us' page.  In
file: `.../templates/about_us.pt` put:

    <div metal:use-macro="load: base_layout.pt">
        <div metal:fill-slot="content">
            <p>Hello World.</p>
        </div>
    </div>

** Includes

   We will use the examle of having a copyright statement that we want
   to include in many places on our website, but when next year rolls
   around we only want to update it with the new year once.

   In file: `<proj>/<proj>/templates/snippets.pt` put:

     <p metal:define-macro="copyright">
       Copyright 2011, <em>Foobar</em> Inc.
     </p>
   
   Lets include this in our 'about us' page, in file:
   `<proj>/<proj>/templates/about.pt` put:

     <span metal:use-macro="load: copyright.pt"/>

   Try:
     
     <span metal:use-macro="container['copyright.pt'].macros.copyright"/>


     load('032-master-template.pt').macros['title']

* database, models, sqlalchemy

  + [[http://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki2/definingmodels.html][reference]]

** Create project
Use the sqlalchemy scaffold:

    % pcreate -s sqlalchemy <project_name>

** Init the database

The database is setup to use SqlLite to begin with.  
This is fine as as we can move to PostgreSQL at a
later date.

A script is installed into your virtual environment
called: 'initialize_<project_name>_db'.  Run that 
now like so:

    % initialize_<proj>_db development.ini

** Add/Change model

Lets create a model called 'friend', which keeps track of
your friends names and ages.

In file: <proj>/<proj>/models.py put something like:

    class Friend(Base):
        __tablename__ = 'friends'
        id = Column(Integer, primary_key=True)
        name = Column(Text)
        age = Column(Integer)
     
        def __init__(self, name, age):
            self.name = name
            self.age = age

Re-run:

    % initialize_<proj>_db development.ini

to have your friends table be created.

* add some data

My project is called: 'sierraspicevancom', so replace those
strings with your own project name.

Lets add some data into the database by hand.  First add
the following into 'development.ini'

```
[pshell]
m = sierraspicevancom.models
session = sierraspicevancom.models.DBSession
t = transaction
```

Now start up the 'pshell'

    % pshell development.ini

Create a 'Friend' object:

```
from sierraspicevancom.models import *
friend = Friend(name="fenton",age=10)
session.add(friend)
t.commit()
session.query(Friend).all()
```

* viewing data

Now we get the application to fetch this data for us.

Create the basic route, view and template, called: 'show_friends'.  See:  
[[*routes][routes]], [[*views][views]] and [[*templating][templating]] for how to do that.

The view portion should look like this:

```python
@view_config(route_name='show_friends', renderer='templates/show_friends.pt')
def show_friends_view(request):
    friends = DBSession.query(Friend).all()
    return {"friends": friends}
```

Now lets access this from the command line (pshell).  In the '[pshell]' 
section of 'development.ini' add:

    setup = sierraspicevancom.pshell.setup

Now create the file: '<proj>/<proj>/pshell.py' and put the following in it:

```python
from webtest import TestApp
def setup(env):
    env['request'].host = 'sierra.spicevan.com'
    env['request'].scheme = 'http'
    env['testapp'] = TestApp(env['app'])
```
+ [[http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/commandline.html#extending-the-shell][reference]]

here we get access to a 'TestApp' variable testapp that lets us interact
with our application from the command line.

* forms

Create a route, view and template, see:  [[*routes][routes]], [[*views][views]] 
and [[*templating][templating]] for how to do that.

In our 'views.py' file add the following imports:

```python
import deform.widget as w
import colander
from deform.form import Form
from deform.schema import FileData
```

For forms we create a Colander schema.  These are the fields
that you want to see on your form.  In our case we'll make
a trivial schema called 'Person' with one field called 'Name'.

    class Person(colander.MappingSchema):
        name = colander.SchemaNode(colander.String())

Next lets make use of this in a view.  Here is the view code:

```python
@view_config(route_name='add_person', renderer="templates/add_person.pt")
def add_person_view(request):
    schema = Person()
    myform = Form(schema, buttons=('submit',))
    if 'submit' in request.POST: # we got here from a submit
        controls = request.POST.items()
        try: 
            appstruct = myform
        except ValidationFailure, e:
            return {"form": e.render(), "values": False}
        values = {
    else:
        return {"form": myform.render()}
```

The method 'add_person_view' is used to both display the
empty form 
* Model, View, Template, and Form

Now lets put together our view and model.  Open 'views.py' 
file.

In the section:

    from .models import (

add our

    Friends,

model.  

** Add route, view, template called: 'add_friend"

see: [[*routes][routes]], [[*views][views]] and [[*templating][templating]] for how to do that.


* testing

+ [[http://docs.pylonsproject.org/projects/pyramid_tutorials/en/latest/getting_started/05-tests/index.html][tutorial reference]]

** install test frameworks

    % pip install webtest nose

** run tests

    % nosetests . 
* shell
There is a REPL shell.  'pshell'.
