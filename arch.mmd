# Installation

## Virtual Box Install

Ensure you choose `Bridged Networking` and select correct network
adaptor.

## Install

    /arch/setup

## Configure Arch 

Setup static ip at: `/etc/rc.conf`, insert

```
# Static IP example
address=192.168.0.2
interface=eth0
netmask=255.255.255.0
broadcast=192.168.0.255
gateway=192.168.0.1
```

setup nameserver (dns)

```
 cat /etc/resolv.conf
nameserver 192.168.0.1
```

get the latest mirrors (and uncomment for your country) with:

    # wget -c http://www.archlinux.org/mirrorlist/all/

and put it here: 

    /etc/pacman.d/mirrorlist
    
update system with:

    # pacman -Syyu --noconfirm
    
## Install/Setup SSH
    
    # pacman --noconfirm -S openssh openssl

Add it as a daemon to `/etc/rc.conf`, sample: 

    DAEMONS=(... network @sshd ...)



## DBus

    # pacman --noconfirm -S dbus
    # rc.d start dbus

add it to the daemons array in `rc.conf`

    DAEMONS=(... dbus ...)

## Apache LAMP

[ref](https://wiki.archlinux.org/index.php/LAMP#Apache)

    # pacman -S --noconfirm apache php php-apache mysql

Update: `/etc/httpd/conf/httpd.conf`

```
# Virtual hosts
Include conf/extra/httpd-vhosts.conf
```

Virtual Hosts: `/etc/httpd/conf/extra/httpd-vhosts.conf`

```xml
<VirtualHost *:80>
  ServerName docs
  DocumentRoot /home/docs/bin/website_static
</VirtualHost>
```

# Start/Stop/Restart Services

Example for sshd: 

    # rc.d {start|stop|restart} sshd

All scripts are kept in the folder: `/etc/rc.d`

# Install X Windows

* [beginners guide - x][arch-beg-x-win]
* [virtual box][arch-virtual-box]

```bash
# pacman --noconfirm -S xorg-server xorg-xinit xorg-utils xorg-server-utils
# pacman --noconfirm -S mesa
# pacman --noconfirm -S mesa-demos
# pacman --noconfirm -S virtualbox-archlinux-additions
# reboot
# modprobe -a vboxguest vboxsf vboxvideo
```    
    
add to `rc.conf`

    MODULES=(... vboxguest vboxsf vboxvideo)

if you don't already have an ~/.xinitrc, do:

    cp /etc/skel/.xinitrc ~/.xinitrc

and put the following in it:

```
VBoxClient-all &
# exec gnome-session
# exec startkde
# exec startxfce4
# ...or the Window Manager of your choice
```

    # pacman --noconfirm -S xf86-video-vesa
    # pacman --noconfirm -S xf86-input-synaptics
    # pacman --noconfirm -S zlib
    # startx
    # pacman --noconfirm -S ttf-dejavu
    
# Add User

Install sudo:

    # pacman --noconfirm -S sudo

Add a user, default group: `users`, shell is `bash`

    # useradd -m -g users -s /bin/bash docs; passwd docs
    # visudo

allow docs to do everything with an entry like:

    docs ALL=(ALL) ALL

# RVM - Ruby

[rvm ruby reference][rvm ruby]

    # pacman --noconfirm -S git curl

now become user docs

    # su - docs
    $ sudo bash < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )
    $ sudo usermod -a -G rvm docs

as root:

    # pacman -Sy --noconfirm gcc patch curl zlib readline libxml2 libxslt git autoconf automake diffutils make libtool bison subversion
    # ln -s /lib/libpcre.so.0 /usr/lib/libpcre.so.1

as docs user:

    $ rvm install 1.9.3
    $ rvm use 1.9.3 --default
    
# Xfce Desktop Environment (not complete, not working)

[xfce reference][xfce ref wiki]

as root

    # pacman --noconfirm -S xfce4
    
as docs (if u don't already have an ~/.xinitrc file do:

    $ cp /etc/skel/.xinitrc ~/.xinitrc

add to it:

    exec ck-launch-session startxfce4
    
[arch-beg-x-win]: https://wiki.archlinux.org/index.php/Beginners'_Guide#Graphical_User_Interface
[arch-virtual-box]: https://wiki.archlinux.org/index.php/Arch_Linux_VirtualBox_Guest#Arch_Linux_guests
[rvm ruby]: https://wiki.archlinux.org/index.php/RVM
[xfce ref wiki]: https://wiki.archlinux.org/index.php/Xfce

# Virtualization (not complete - not working)

[Ref](https://wiki.archlinux.org/index.php/KVM)

    # pacman -S qemu-kvm
    
Add a user `fenton`, default group: `users`, shell is `bash`

    # useradd -m -g users -s /bin/bash fenton
    # usermod -a -G kvm fenton

Add user `fenton` to sudo:

    # visudo

Put in entry like:

    fenton ALL=(ALL) ALL
    
add modules to `/etc/rc.conf`

    MODULES=(kvm kvm-intel)

Reboot.

Login as `fenton`, and create OS Image

```bash
# su - fenton
$ qemu-img create -f qcow2 arch2 2G
```

# Nginx, Passenger, Rack, ...

http://tommy.chheng.com/2009/06/09/deploying-a-sinatra-app-on-nginx-passenger-with-capistrano-and-git/

first ensure you have a rvm/ruby environment setup.

install `passenger-install-nginx-module`

    gem install passenger-install-nginx-module
    
just follow the defaults

Edit the `/opt/nginx/conf/nginx.conf` to specify where to save the
nginx pid file to:

    pid /var/run/nginx.pid;
    
Create a start file in: `/etc/rc.d/nginx` (755 permissions), with the
following contents:

```
#!/bin/bash

# general config

NGINX_CONFIG="/opt/nginx/conf/nginx.conf"

. /etc/conf.d/nginx
. /etc/rc.conf
. /etc/rc.d/functions

function check_config 
  stat_busy "Checking configuration"
  /usr/sbin/nginx -t -q -c "$NGINX_CONFIG"
  if [ $? -ne 0 ]; then
    stat_die
  else
    stat_done
  fi
}

case "$1" in
  start)
    check_config
    $0 careless_start
    ;;
  careless_start)
    stat_busy "Starting Nginx"
    if [ -s /var/run/nginx.pid ]; then
      stat_fail
      # probably ;)
      stat_busy "Nginx is already running"
      stat_die
     fi
    /usr/sbin/nginx -c "$NGINX_CONFIG" &>/dev/null
    if [ $? -ne 0 ]; then
      stat_fail
    else
      add_daemon nginx
      stat_done
    fi
    ;;
  stop)
    stat_busy "Stopping Nginx"
    NGINX_PID=`cat /var/run/nginx.pid 2>/dev/null`
    kill -QUIT $NGINX_PID &>/dev/null
    if [ $? -ne 0 ]; then
      stat_fail
    else
      for i in `seq 1 10`; do
        [ -d /proc/$NGINX_PID ] || { stat_done; rm_daemon nginx; exit 0; }
        sleep 1
      done
      stat_fail
    fi
    ;;
  restart)
    check_config
    $0 stop
    sleep 1
    $0 careless_start
    ;;
  reload)
    check_config
    if [ -s /var/run/nginx.pid ]; then
      status "Reloading Nginx Configuration" kill -HUP `cat /var/run/nginx.pid`
    fi
    ;;
  check)
    check_config
    ;;
  *)
    echo "usage: $0 {start|stop|restart|reload|check|careless_start}"
esac
```

Have a `/etc/conf.d/nginx` file with the following in it:

```
NGINX_CONFIG=/etc/nginx/conf/nginx.conf
```

Modify the user `nginx` runs as, with a line like the following in
`/opt/nginx/conf/nginx.conf` 















Suppose you have a Ruby on Rails application in /somewhere. Add a server block
to your Nginx configuration file, set its root to /somewhere/public, and set
'passenger_enabled on', like this:

```
server {
      listen 80;
      server_name www.yourhost.com;
      root /somewhere/public;   # <--- be sure to point to 'public'!
      passenger_enabled on;
   }
```






[ref](https://wiki.archlinux.org/index.php/Nginx)

    # pacman --noconfirm -S nginx

Start:

    # rc.d start nginx
    
Home page: `/etc/nginx/html/index.html`, test with: `http://127.0.0.1`

Add to daemon list: `/etc/rc.conf`:

    DAEMONS=(... @nginx)
    
You can modify the configurations by editing the files in
`/etc/nginx/conf`. (`/etc/nginx/conf/nginx.conf` being the main config
file.)

## VPN
To download installer, method 1: Open browser and access http://myaccess.oraclevpn.com, after logging in, try to activate AnyConnect, browser would prompt for installation or downloading file which you can run to install; method 2: Goto ftp://obiftp/modules/unlicensed/global/ciscoanyconnect/2.5.3055/linux/ to download the 32bit or 64bit version for installation.

After installation, run /opt/cisco/vpn/bin/vpnui to start the vpn client. However, you may find that after rebooting, the vpn client is broken. What you see is a window just displayed and then disapear very quickly. The solution is to add vpnagentd_init to /etc/rc.conf's DAEMONS section. Reboot or run:
rc.d start vpnagentd_init.

Then you can enjoy vpn client successfully.

