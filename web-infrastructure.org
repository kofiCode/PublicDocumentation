* software architecture
** nginx
nginx is the load balancer

configuration [[file:/etc/nginx/conf.d/sierra.conf][/etc/nginx/conf.d/sierra.conf]]

access logs: [[file:/sudo:qa@localhost:/home/qa/logs/sierra.spicevan.com/access.log][/home/qa/logs/sierra.spicevan.com/access.log]]

** pserve
pserve actually serves up the python code

startup script: [[file:/sudo:qa@localhost:/home/qa/projects/python/sierra.spicevan.com/scripts/prod_deamon_start.sh][/home/qa/projects/python/sierra.spicevan.com/scripts/prod_deamon_start.sh]]

conf file:
[[file:/sudo:qa@localhost:/home/qa/projects/python/sierra.spicevan.com/production.ini][/home/qa/projects/python/sierra.spicevan.com/production.ini]]

logs:
 [[file:/sudo:qa@localhost:/home/qa/projects/python/sierra.spicevan.com/pyramid_5000.log][/home/qa/projects/python/sierra.spicevan.com/pyramid_5000.log]]
 [[file:/sudo:qa@localhost:/home/qa/projects/python/sierra.spicevan.com/pyramid_5001.log][/home/qa/projects/python/sierra.spicevan.com/pyramid_5001.log]]

** supervisor
supervisor starts up 2 pserves and ensures they stay running

conf: [[file:/etc/supervisor.d/sierra.spicevan.com.ini][/etc/supervisor.d/sierra.spicevan.com.ini]]
log files: 
   [[file:/sudo:qa@localhost:/home/qa/sierra.spicevan.com-0.log][/home/qa/sierra.spicevan.com-0.log]] 
   [[file:/sudo:qa@localhost:/home/qa/sierra.spicevan.com-1.log][/home/qa/sierra.spicevan.com-1.log]]

* deployment steps

* bangkok router

Only works with windows 8 and 
192.168.2.1

* nginx reverse proxy / load balancer

+ [[http://www.cyberciti.biz/tips/using-nginx-as-reverse-proxy.html][reference]]

* Dynamic DNS

username: ftravers

see: [[file:arch.org::*Get%20Dyn%20DNS%20URL][Get Dyn DNS URL]]

** Name servers

ns1-ns4.afraid.org

* DDNS Round Robin

round robin domain: `www.webhostsunshine.com`

To setup a round robin mapping of domain name to IP address.  First
add webhostshunshine.com to afraid.org, dynamic dns.  This will
create about 5 sub-domains, one being `www.webhostsunshine.com`.  We
add a second `www.webhostsunshine.com` sub-domain, but ensure that
the IP address is different from the first.

We have two hosts at the moment, one in Bangkok one in Vancouver.
These are called:

v13.webhostsunshine.com
bkk.webhostsunshine.com

on each of these hosts there will be users: `prod` and `qa`.


* OLD:
** Steel Bank Common Lisp

Is a bit like the java virtual machine, but we have `screen` sessions
with `sbcl` running in each.  

*** Web Server Port

    ~/.sbclrc

specifies the port the webserver for each of prod and qa is running
on.

```
(defpackage :sbclrc-file
  (:use :cl)
  (:export :*webserver-port*))
(in-package :sbclrc-file)
;; Webserver port to listen on
(defparameter *webserver-port* 82)  ; <--- ENV SPECIFIC!!!
```

`sbclrc-file:*webserver-port*` can now be used to start a
`hunchentoot` webserver.

*** Swank/Slime port

    ~/.sbclrc

specifies the port the swank server is listening on for slime
connections.

```
(ql:quickload "swank")
(swank:create-server :port 4082 :dont-close t)   ; <--- ENV SPECIFIC!!!
```

** Code Development/Deployment cycle

Emacs and slime are used locally to develop code.  When you are ready
to push, we `git push` it to the server.  Then we log into the
various servers and pull for each of the `qa` and `prod` users.
After the pulling has been done, we do a lisp `(ql:quickload
'project-name)`, which will pull in the code that has been `git
pull`'ed over.

** Folder Layout/Structure

/
`-- home
    `-- <user>
        `-- projects
            `-- lisp
                |-- project-1
                |   |-- project-1.asd
                |   |-- package.lisp
                |   `-- project-1.lisp
                |-- project-2
                |   `-- ...
                `-- systems

To allow a project to be accessible from SBCL, you must symbolic link
the `*.asd` file from the `systems` folder.

** Slime

The swank server will be running on ports:

| qa   | 4081 |
| prod | 4080 | 

So to create an ssh tunnel to the `qa` port 4081 make an ssh tunnel
from your local machine to the remote server.  We issue the following
command from our computer:
  
    $ ssh -L 4081:127.0.0.1:4081 fenton@v13.webhostsunshine.com

The format of the command is:

    $ ssh -L <local-port>:<local-host>:<remote-port> <remote-user>@<remote-host>

After you execute the above command you should be dropped into the
terminal prompt of the remote-user on the remote-host.

Then run:!

    A-x slime-connect

from emacs, choose the local host: `127.0.0.1` and port `4081`.

To quit:

    A-x slime-disconnect
