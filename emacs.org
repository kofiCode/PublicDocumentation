* Reference

[GNU Emacs Manuals Online](http://www.gnu.org/software/emacs/manual/)

* Super Useful

Key Stroke | Effect                           
---------- | -------------------------------- 
A-\        | Delete horizontal space
C-h a      | Will find all functions that have string in it

* Files

| Key Stroke | Effect                           |
| ---------- | -------------------------------- |
C-x C-f      | Open a new file
C-x s        | Save buffer(s)
C-x C-w      | Save As
C-x C-c      | Close emacs
C-x C-r      | Open file read only
C-x C-c      | Exit Emacs

* Navigation, Search & Replace

| Key Stroke        | Effect                           |
| ----------------- | -------------------------------- |
A->                 | Go to the beginning of the file
A-<                 | Go to the end of the file
A-g A-g             | Goto line *
A-(L/R) arrows      | Move word forward/backwards
A-f, A-b            | Move word forward/backwards
C-s                 | Incremental Search Forward
C-A-s               | Regular Expression incremental search
C-r                 | Incremental Search Backwards
A-%                 | Replace
A-x                 | query-replace-regexp Regex Replace
C-q C-j             | Keystroke for Carriage Return
C-q                 | Keystroke for space character
C-x (, C-x ), C-x e | Start, stop, playback macro
C-u 25 C-x e        | Replay macro 25 times
C-u C-space         | Return to previous position

* Special Characters

| Name             | ASCII Code | string notation | Caret Notation | Input method                  |
| ---------------- | ---------- | --------------- | -------------- | ------------                  |
| horizontal tab   | 9          | \t              | I              | Ctrl+q Ctrl+i or Ctrl+q Tab   |
| line feed        | 10         | \n              | J              | Ctrl+q Ctrl+j                 |
| carriage return  | 13         | \r              | M              | Ctrl+q Ctrl+m or Ctrl+q Enter | 

* Buffers, Regions, & Windows

| Key Stroke          | Effect                           |
| ------------------- | -------------------------------- |
C-x 1                 | Unsplit window (keep this)
C-x 0                 | Unsplit window (keep others)
C-x 2                 | Split window horizontal
C-x 3                 | Split window vertical
C-x o                 | Move to the next window
C-x 1                 | Collapse other window
C-x 0                 | Collapse this window
C-x b                 | Load previous buffer
C-x C-b               | List all buffers. e to edit buffer
C-x k                 | Close buffer
C-x C-v Ret           | Reload buffer from file system
C-x b **scratch** RET | re-open scratch buffer
d                     | In buffer list, mark buffer for deletion, happens when hit x
A-^                   | Join this line to previous and fix up whitespace at join. If there is a fill prefix, delete it from the beginning of this line.

* Edit, Selection, Cut & Paste

| Key Stroke                 | Effect                           |
| ----------                 | -------------------------------- |
C-x u                        | Undo
A-q                          | Reformat Paragraph, take first line to 0 indent, then A-q, rest of paragraph is now 0 indent
C-A-\                        | Auto indent selected region
A-^                          | Remove indentation, brings current line up one
C-c C-c, M-x comment-region  | Comment out a marked region
C-u C-c C-c                  | Un-comment out the marked region
C-x h                        | Select wHole buffer
C-x 0                        | Delete the current window
A-w                          | Copy
C-w                          | Cut
C-y, Esc-y                   | Yank (paste), successive Esc-y get clipboard history
A-x cua-mode                 | Column Edit, C-Ret. begin selection

* Calculator

to start the Calculator:

    A-x calc

to quit type: `q`

* Misc

** Automatic word wrap

Toggle auto word wrap with: `M-x auto-fill-mode`

** Truncate long lines

When u dont want emacs to wrap long lines do one of the following:

    M-x <RET> toggle-truncate-lines <RET>
    M-x <RET> set-variable <RET> truncate-lines <RET> t

or put the following in your .emacs to have on by default

    (setq-default truncate-lines t)

** Sort selection

    M-x sort-lines

** XML Formatting

 In sgml-mode, a built-in pretty printing function called
(sgml-pretty-print ...)

* Exuberant ctags

go to the root of your source and enter:

```bash
ctags -Re
```

* Diff

-   [Reference](http://www.gnu.org/software/emacs/manual/html_node/emacs/Diff-Mode.html)

| Command  | Meaning                           |
| -------- | -------------------------------- |
C-c C-n    | Restrict the view to the current hunk (diff-restrict-view). See Narrowing. With a prefix argument of C-u, restrict the view to the current file of a multiple-file patch. 
C-x n w    | To widen again
A-n        | Move to the next hunk-start (diff-hunk-next).
A-p        | Move to the previous hunk-start (diff-hunk-prev).

Additional commands: 

```
diff-buffer-with-file
```


** Flyspell

Command  | Meaning                           
-------- | -------------------------------- 
F8       | ispell for word the cursor is on
C-S-F8   | disable flyspell
C-A-F8   | run flyspell
C-F8     | ispell for flyspell highlighted word PRIOR to cursor position
A-F8     | ispell for flyspell highlighted work AFTER the cursor position
* Latex

| Key Stroke  | Effect                           |
| ----------  | -------------------------------- |
C-c C-c       | to compile to **.dvi/**.pdf, again to view
C-c C-t C-p   | to toggle into PDF mode.
C-c =         | show TOC
* Cheatsheet

| Key Stroke            | Effect                           |
| ----------            | -------------------------------- |
C-h v < variable-name > | display the contents of a variable
C-x C-e                 | evaluate an expression: position the cursor after a list and type

* Overview

Put your code into `*.el` files. Then put `*.el` into a directory on
your load-path, `/usr/local/share/emacs/site-lisp` or
`/usr/share/emacs/site-lisp/`, are reasonable locations. Then you can
put a line like the following into your .emacs file:

    (require 'textile-mode)

Put following into .emacs file, so you can reload your .emacs file
without closing and reopenning emacs.

    ;; Reload .emacs file by typing: A-x reload.
    (defun reload () "Reloads .emacs interactively."
    (interactive)
    (load "~/.emacs")) 
* Reference

[GNU Emacs Manuals Online](http://www.gnu.org/software/emacs/manual/)

    C-SP     set-mark-command         C-q      quoted-insert
    C-a      beginning-of-line       C-r      isearch-backward
    C-b      backward-char           C-s      isearch-forward
    C-c      exit-recursive-edit         C-t      transpose-chars
    C-d      delete-char             C-u      universal-argument
    C-e      end-of-line             C-v      scroll-up
    C-f      forward-char            C-w      kill-region
    C-h      help-command            C-x      Control-X-prefix
    TAB      indent-for-tab-command      C-y      yank
    LFD      newline-and-indent      C-z      suspend-emacs
    C-k      kill-line           ESC      ESC-prefix
    C-l      recenter            C-]      abort-recursive-edit
    RET      newline             C-_      undo
    C-n      next-line           SPC .. ~        self-insert-command
    C-o      open-line           DEL      delete-backward-char
    C-p      previous-line
    
    C-h v    describe-variable       C-h d    describe-function
    C-h w    where-is            C-h k    describe-key
    C-h t    help-with-tutorial      C-h c    describe-key-briefly
    C-h s    describe-syntax         C-h b    describe-bindings
    C-h n    view-emacs-news         C-h a    command-apropos
    C-h C-n  view-emacs-news         C-h C-d  describe-distribution
    C-h m    describe-mode           C-h C-c  describe-copying
    C-h l    view-lossage            C-h ?    help-for-help
    C-h i    info                C-h C-h  help-for-help
    C-h f    describe-function
    
    C-x C-a  add-mode-abbrev         C-x 5    split-window-horizontally
    C-x C-b  list-buffers            C-x ;    set-comment-column
    C-x C-c  save-buffers-kill-emacs     C-x <    scroll-left
    C-x C-d  list-directory          C-x =    what-cursor-position
    C-x C-e  eval-last-sexp          C-x >    scroll-right
    C-x C-f  find-file           C-x [    backward-page
    C-x C-h  inverse-add-mode-abbrev     C-x ]    forward-page
    C-x TAB  indent-rigidly          C-x ^    enlarge-window
    C-x C-l  downcase-region         C-x `    next-error
    C-x C-n  set-goal-column         C-x a    append-to-buffer
    C-x C-o  delete-blank-lines      C-x b    switch-to-buffer
    C-x C-p  mark-page           C-x d    dired
    C-x C-q  toggle-read-only        C-x e    call-last-kbd-macro
    C-x C-r  find-file-read-only         C-x f    set-fill-column
    C-x C-s  save-buffer             C-x g    insert-register
    C-x C-t  transpose-lines         C-x h    mark-whole-buffer
    C-x C-u  upcase-region           C-x i    insert-file
    C-x C-v  find-alternate-file         C-x j    register-to-dot
    C-x C-w  write-file          C-x k    kill-buffer
    C-x C-x  exchange-dot-and-mark       C-x l    count-lines-page
    C-x C-z  suspend-emacs           C-x m    mail
    C-x ESC  repeat-complex-command      C-x n    narrow-to-region
    C-x $    set-selective-display       C-x o    other-window
    C-x (    start-kbd-macro         C-x p    narrow-to-page
    C-x )    end-kbd-macro           C-x q    kbd-macro-query
    C-x +    add-global-abbrev       C-x r    copy-rectangle-to-register
    C-x -    inverse-add-global-abbrev   C-x s    save-some-buffers
    C-x .    set-fill-prefix         C-x u    advertised-undo
    C-x /    dot-to-register         C-x w    widen
    C-x 0    delete-window           C-x x    copy-to-register
    C-x 1    delete-other-windows        C-x {    shrink-window-horizontally
    C-x 2    split-window-vertically     C-x }    enlarge-window-horizontally
    C-x 4    ctl-x-4-prefix          C-x DEL  backward-kill-sentence
    
    Alt C-SP mark-sexp           Alt =    count-lines-region
    Alt C-a  beginning-of-defun      Alt >    end-of-buffer
    Alt C-b  backward-sexp           Alt @    mark-word
    Alt C-c  exit-recursive-edit         Alt O    ??
    Alt C-d  down-list           Alt [    backward-paragraph
    Alt C-e  end-of-defun            Alt \    delete-horizontal-space
    Alt C-f  forward-sexp            Alt ]    forward-paragraph
    Alt C-h  mark-defun          Alt ^    delete-indentation
    Alt LFD  indent-new-comment-line     Alt a    backward-sentence
    Alt C-k  kill-sexp           Alt b    backward-word
    Alt C-n  forward-list            Alt c    capitalize-word
    Alt C-o  split-line          Alt d    kill-word
    Alt C-p  backward-list           Alt e    forward-sentence
    Alt C-s  isearch-forward-regexp      Alt f    forward-word
    Alt C-t  transpose-sexps         Alt g    fill-region
    Alt C-u  backward-up-list        Alt h    mark-paragraph
    Alt C-v  scroll-other-window         Alt i    tab-to-tab-stop
    Alt C-w  append-next-kill        Alt j    indent-new-comment-line
    Alt Alt  ??              Alt k    kill-sentence
    Alt C-\  indent-region           Alt l    downcase-word
    Alt SPC  just-one-space          Alt m    back-to-indentation
    Alt !    shell-command           Alt q    fill-paragraph
    Alt $    spell-word          Alt r    move-to-window-line
    Alt %    query-replace           Alt t    transpose-words
    Alt '    abbrev-prefix-mark      Alt u    upcase-word
    Alt (    insert-parentheses      Alt v    scroll-down
    Alt )    move-past-close-and-reindent    Alt w    copy-region-as-kill
    Alt ,    tags-loop-continue      Alt x    execute-extended-command
    Alt -    negative-argument       Alt y    yank-pop
    Alt .    find-tag            Alt z    zap-to-char
    Alt 0 .. Alt 9  digit-argument       Alt    |    shell-command-on-region
    Alt ;    indent-for-comment      Alt ~    not-modified
    Alt <    beginning-of-buffer      Alt DEL  backward-kill-word
    
    
    C-x 4 C-f   find-file-other-window   C-x 4 d  dired-other-window
    C-x 4 .     find-tag-other-window    C-x 4 f  find-file-other-window
    C-x 4 b     pop-to-buffer            C-x 4 m  mail-other-window


Dos to unix

    M-x set-buffer-file-coding-system RET undecided-unix

save the file (`C-x C-s`), or

    C-x RET f undecided-unix
    C-x C-f

Unix to dos

    M-x set-buffer-file-coding-system RET undecided-dos

save the file (`C-x C-s`), or

    C-x RET f undecided-dos
    C-x C-f

* Setup ELPA

Emacs Lisp Package Archive

Eval (C-x C-e) the following in an emacs buffer:

```
(let ((buffer (url-retrieve-synchronously
			 "http://tromey.com/elpa/package-install.el")))
(save-excursion
	(set-buffer buffer)
	(goto-char (point-min))
	(re-search-forward "^$" nil 'move)
	(eval-region (point) (point-max))
	(kill-buffer (current-buffer))))
```

Then do: 

    M-x package-list-packages 	
						
						
						
						
						
				
** Emacs mail reader (incomplete)
notmuch is, like, [0] an emacs mail-reader frontend over a xapian database; see http://keithp.com/blogs/notmuch/ or http://notmuchmail.org                                              │ Athas
11:33:21        fsbot | [1] see *notmuch                                                                                                                                                                        │ atrus`
11:35:06            * | bremner looks around shiftily                                                                                                                                                           │ avar
11:36:35            * | homie needles bremner vodoo wise!                                                                                                                                                       │ axrfnu
11:37:31            * | bremner nods knowingly                                                                                                                                                                  │ az
11:46:56     krishnab | @fenton It took me a few tries, but I got it to work. I have many IMAP gmail email addresses, so it works pretty good with those. I think I tried setting it up for one address first   │ b0ef
                      | and got it working. Then I added extra addresses. I think I modeled my final config files based on http://www.gnumonk.com/my-config/my-emacs . Just make the appropriate changes based  │ barik
                      | on your own config.  
                      
* Use Cases

** Kill whole sentence in text mode.

So there are two functions `kill-sentence`, and
`backwards-kill-sentence` but I want a single function that executes
both action, and I want to map that to a key in the text-mode.

First lets look at how to bind a key in a certain major-mode.

```lisp
(add-hook 'html-mode-hook
 (lambda ()
 (local-set-key (kbd "C-c w") 'bold-word)
 (local-set-key (kbd "C-c b") 'blue-word)
 (local-set-key (kbd "C-c p") 'insert-p)
 (local-set-key (kbd "M-4") 'tag-image)
 (local-set-key (kbd "M-5") 'wrap-url)
 )
)
```

I want to bind this function to the key combo: `M-k` or `Alt-k`.  So
maybe i should make a function from these two functions now.

Here is an example:

```lisp
(defun multiply-by-seven (number)
     "Multiply NUMBER by seven."
     (* 7 number))
```

So we might do something like:

```lisp
(defun kill-whole-sentence ()
  (backwards-kill-sentence)
  (kill-sentence))
```

However, in order for a function to be 'callable' it needs to be a
'command' or 'interactive' function.  We remedy this by inserting the
`interactive` keyword:

```lisp
(defun kill-whole-sentence ()
  (interactive)
  (backwards-kill-sentence)
  (kill-sentence))
```

Now typing: `M-x kill-whole [TAB]` reveals that this function is
defined.

Now lets assign it properly with:


```lisp
(add-hook 
 'text-mode-hook
 (lambda ()
   (local-set-key (kbd "M-k") 'kill-whole-sentence)))
```

* Org Mode
** Cheatsheet

| Key            | Effect                 |
|----------------+------------------------|
| A-LEFT/RIGHT   | promote/demote heading |
| S-A-LEFT/RIGHT | promote/demote subtree |

** Tables

| Keys    | Description     |
|---------+-----------------|
| C-c RET | Horizontal Rule |

** Export as HTML

| Keys      | Description    |
|-----------+----------------|
| C-c C-e h | Export to HTML |
|           |                |

** Quickies
| Keys  | Effect                                   |
|-------+------------------------------------------|
| C-c ^ | sort all subentries of the current entry |
| C-c . | add a timestamp to the current entry     |

Use Shift and arrows to skip days or weeks. Use the mouse on the
calendar or press Enter on a specific day to choose it.

** Links

   Visit another file (target) and type: `C-c l`.  Then go back to the
   source file and insert the link to the target with: `C-c C-l`.

| Keys    | Effect                         |
|---------+--------------------------------|
| C-c l   | Clipboard link to current file |
| C-c C-l | Paste link to file             |
| C-c C-o | Open URL / follow link         |

** TODO

This toggles between TODO/DONE/and nothing

    C-c C-t
  
** Move entries

Move entry up or down:

    M-(up or down arrow)
   
Promote/Demote:

    M-(left/right arrow)
    
** Global Agenda

First you must set the variable org-agenda-files so that org-mode will
know which files to search for TODOs and scheduled items. 

```elisp
(setq org-agenda-files (list "~/org/work.org"
                             "~/org/school.org" 
                             "~/org/home.org"))
```

    C-c a t
    
** Schedule a Task

Go to line after a todo and do:

   C-c C-s
   
Can use syntax like: `+2w` for two weeks from now.

** Get agenda

     C-c a a

* Workgroups

** Frequent Use

|--------------+--------------------------|w
| <prefix> u   | Update base from working |
| <prefix> C-s | Save                     |
|--------------+--------------------------|

Set the prefix key with:

    (setq wg-prefix-key (kbd "C-c w"))

You can create a workgroup, rename it, switch to a named workgroup.
You can go to the previous or next workgroups, or you can go to the
workgroup number (0-9).

| Keys         | Description  |
|--------------+--------------|
| <prefix> c   | Create       |
| <prefix> A   | Rename       |
| <prefix> v   | Switch   *** |
| <prefix> p   | Previous     |
| <prefix> n   | Next         |
| <prefix> 0-9 | Goto         |

Workgroups actually consist of two workgroups.  The base workgroup,
and the working workgroup.  The base config is the one that you have
saved. The working one is the current one.  So if you move your
cursor, adjust buffer windows, etc..., your current config is now
different from your base config.

| Keys       | Description              |
|------------+--------------------------|
| <prefix> r | Revert working from base |
| <prefix> u | Update base from working |
| <prefix> R | Revert ALL               |
| <prefix> U | Update ALL               |

Save workgroups to a file, or load them with:

| Keys         | Description |
|--------------+-------------|
| <prefix> C-s | Save        |
| <prefix> C-l | Load        |

Killing a workgroup deletes it from the list of workgroups, and copies
its working config to the kill ring. You can yank killed wconfigs into
the current frame.

| Keys         | Description               |
|--------------+---------------------------|
| <prefix> k   | Kill                      |
| <prefix> y   | Yank                      |
| <prefix> A-w | Save current -> kill ring |
| <prefix> A-W | Save base -> kill ring    |

You can move a workgroup leftward or rightward in the workgroups
list.

| Keys           | Description  |
|----------------+--------------|
| <prefix> C-S-< | Offset Left  |
| <prefix> C-S-> | Offset Right |

Clone a workgroup

| Keys | Description       |
|------+-------------------|
| C    | Clone a workgroup |


** Coding Workgroups

I want, when i go to kill emacs for it to ask me if i want to save
the current buffer layout to the active workgroup.

```elisp
;; try to write function that will allow the prompting 
;; of updating AND saving the current workspace.
(defun ft-uw () 
  "function to ask user if they'd like to update
their current workgroup"
  (progn 
    (if (y-or-n-p "Update workgroup?")
        (progn 
          (wg-update-workgroup (wg-current-workgroup))
          (wg-save wg-file))
      1)))
(add-hook 'kill-emacs-query-functions 'ft-uw )
```elisp

  I think the
function I want is: `wg-update-workgroup`, however it is not
interactive.  Looks like something like the following might work:

```
(defun foo (str bool)
  (interactive
    (list (read-string "Some text: ")
          (y-or-n-p "Update workgroup with current buffer layout?")))
  (some-func str)
  (if bool (some-other-func str)))
```

** workgroups2

Not using workgroups 2 seemed to have too many bugs.

| c   | create workgroup    |
| k   | kill workgroup      |
| v   | switch to workgroup |
| C-s | save session        |
| C-f | load session        |

* Syntax Highlighting

I want to highlight code that falls between:

```
and the next
```

So above: 'and the next' would be highlighted.  Can look at
markdown-mode.el, but for now it's a bit too complex, so leave it for
later. 

* Emacs installed packages

  auto-complete      1.4          installed  Auto Completion for GNU Emacs
  bookmark+          20111214     installed  Bookmark Plus
  color-theme        6.5.5        installed  install color themes
  findr              0.7          installed  Breadth-first file-finding facility for (X)Emacs
  haskell-mode       2.8.0        installed  Haskell editing mode
  highlight-paren... 1.0.1        installed  highlight surrounding parentheses
  hl-sexp            1.0.0        installed  highlight the current sexp
  inf-ruby           2.2.4        installed  Run a ruby process in a buffer
  inflections        1.1          installed  convert english words between singular and plural
  jump               2.2          installed  build functions which contextually jump between files
  org                20130318     installed  Outline-based notes management and organizer
  org-cua-dwim       0.5          installed  Org-mode and Cua mode compatibility layer
  paredit            22           installed  minor mode for editing parentheses  -*- Mode: Emacs-Lisp -*-
  popup              0.5          installed  Visual Popup User Interface
  rinari             2.10         installed  Rinari Is Not A Rails IDE
  ruby-compilation   0.9          installed  run a ruby process in a compilation buffer
  ruby-mode          1.1          installed  ruby-mode package
  workgroups         0.2.0        installed  workgroups for windows (for Emacs)

wg-list
* GIT
** ref

http://alexott.net/en/writings/emacs-vcs/EmacsGit.html#sec7

** vc-git

| Keys        | Description               |
|-------------+---------------------------|
| git-status  | Start VC-GIT              |
|-------------+---------------------------|
| n, p        | next,previous lines       |
| m, u, SPC   | mark, unmark, toggle mark |
| a, r        | add, remove               |
| v, o        | view, open                |
| i           | ignore file > .gitignore  |
| =           | see what has changed      |
| c           | commit changes            |
| C-c C-c     | finish commit message     |
|-------------+---------------------------|
| git-merge   | Merge from another branch |
| !           | resolve conflicts         |
| git-log     |                           |
| git-history |                           |
| k           | gitk                      |

** magit

Start Magit:

    A-x magit-status

Adding Files

|-------------+-----------------------------|
| key/command | Effect                      |
|-------------+-----------------------------|
| s, u        | stage (add), unstage        |
| S, U        | stage, unstage ALL          |
| c           | COMMIT, free form message   |
| C           | COMMIT, files changed added |
| P P         | Push                        |
| F F         | Pull (Fetch)                |
| RET         | open file                   |
|-------------+-----------------------------|

Ignore / delete files

|-------------+------------------------------|
| key/command | Effect                       |
|-------------+------------------------------|
| k           | file unknown > delete        |
| k           | file modified > drop changes |
| i           | IGNORE                       |
|-------------+------------------------------|
| z, a, k     | stash, apply, kill           |
|-------------+------------------------------|

z will stash changes, a will take stashed changes and 'a'pply them to
the current repo. k will 'k'ill the stashd changes.


|------+--------------------------------------|
| TAB  | Toggle display changes               |
| A-S  | Show all                             |
| A-H  | Hide All                             |
|------+--------------------------------------|
| d    | diff working tree to another version |
| D    | diff two arbitrary versions          |
| SPC  | Scroll DOWN                          |
| DEL  | scroll UP                            |
|------+--------------------------------------|
| x    | rollback to changeset                |
| X    | rollback to last commit              |
|------+--------------------------------------|
| l    | history current branch               |
| L    | history range                        |
|------+--------------------------------------|
| RET  | Get Detailed INFO                    |
| .    | mark changeset                       |
| =    | display changes                      |
|------+--------------------------------------|

When moving through history can get detailed info with `RET` key. To
do this, he need to move to first changeset and mark it with the . key
(magit-mark-item), and than, move to the other changeset, and display
the changes by pressing the = key (magit-diff-with-mark). 

|---+-----------------------------------|
| a | apply changeset under point       |
| A | apply and COMMIT                  |
| v | reVert changes                    |
|---+-----------------------------------|
| h | local history                     |
| H | specify versions in local history |
|---+-----------------------------------|

Movement between sections

|--------------+----------------------|
|  key/command | Effect               |
|--------------+----------------------|
|            g | refresh buffer       |
|            1 | goto untracked       |
|            2 | unstaged             |
|            3 | staged               |
|            4 | unpushed             |
|--------------+----------------------|


*** Tags, branches, and remote repositories

|---+---------------------------------|
| t | tag                             |
| T | annotated tag                   |
| B | create and switch to new BRANCH |
| b | switch to existing BRANCH       |
| R | rebase                          |
| M | MERGE                           |
| m | manual merge                    |
| f | fetch remote updates            |
| F | PULL                            |
| P | PUSH                            |
* ERC
* org2blog

** Create a new blog entry

login > new entry > compose blog entry > ???

|-----------------------+-----------|
| function              | effect    |
|-----------------------+-----------|
| org2blog/wp-login     | login     |
| org2blog/wp-logout    | logout    |
| org2blog/wp-new-entry | new entry |
|-----------------------+-----------|

NOTE: login to word press to be able to see drafts etc...

|-------+--------------------------------------|
| key   | effect                               |
|-------+--------------------------------------|
| C-c d | post buffer as draft (doesn't work?) |
| C-c p | publish                              |
| C-c D | post as page draft                   |
| C-c P | post as page                         |
|-------+--------------------------------------|

* Keymaps & Function bindings

All bindings:

    C-h b

VERY USEFUL

ref:
http://www.masteringemacs.org/articles/2011/02/08/mastering-key-bindings-emacs/ 

keywords: keybind

** Listing all the Mode Maps

If you type this Emacs will give you an apropos buffer with all the
known mode maps that follow the major mode naming scheme:

    C-u M-x apropos-variable RET -mode-map$ RET

** Define for a given mode map

    (define-key paredit-mode-map (kbd "C-<left>") 'windmove-left)

** Global Def

    (global-set-key "\C-c\C-s" 'fold-dwim-show-all)

** Using mode hooks

```
(defun mp-add-python-keys ()
  (local-set-key (kbd "C-c q") 'shell))
(add-hook 'python-mode-hook 'mp-add-python-keys)
```

** example (incomplete)

Ctrl-right when i was working on *.el files was not define to be
`windmove-right` as I wished but bound to:
`paredit-forward-slurp-sexp`, by paredit minor mode.

* Install the function

Install the function by putting the cursor at the end of the
function and typing C-x C-e. This will install the function for the
life of your current emacs session. To install more permanently put
it in your ~/.emacs file.

To make the above function interactive do:

    (defun multiply-by-seven (number)
      "Multiply NUMBER by seven."
      (interactive "p")
      (message "The result is %d" (* 7 number)))

Invoke with `C-u` some number `A-x multiply-by-seven`.

* Installing *.el files

** One time

Ensure you have the following in your ~/.emacs file:

    (add-to-list 'load-path "~/projects/elisp")

** For each new *.el file

Ensure you have the following in your ~/.emacs file:

    (require 'foo)

where foo means foo.el

And put your foo.el file in: `~/projects/elisp`

* Programming

Try the interactive elisp buffer with: `A-x ielm`

| function | effect                        |
|----------+-------------------------------|
| ielm     | interactive elisp buffer REPL |
| type-of  | tell you type of variable     |
| car      | first part of cons            |
| cdr      | second part of cons           |
|          |                               |

** let expression

(let ((variable value)
           (variable value)
           ...)
       body...)

* Variables

| Variable | Definition |
| -------- | ---------- |
load-path  | The variable load-path lists all the directories where Emacs should look for Elisp files.

[Reference](http://www.gnu.org/software/emacs/emacs-lisp-intro/html_node/index.html)

* To create a function

A function definition has up to five parts following the word
defun:

-   The name of the symbol to which the function definition should
    be attached.
-   A list of the arguments that will be passed to the function. If
    no arguments will be passed to the function, this is an empty list,
    ().
-   Documentation describing the function. (Technically optional,
    but strongly recommended.)
-   Optionally, an expression to make the function interactive so
    you can use it by typing M-x and then the name of the function; or
    by typing an appropriate key or keychord.
-   The code that instructs the computer what to do: the body of
    the function definition.

It is helpful to think of the five parts of a function definition
as being organized in a template, with slots for each part:

    (defun function-name (arguments...)
      "optional-documentation..."
      (interactive argument-passing-info)     ; optional
      body...)

As an example, here is the code for a function that multiplies its
argument by 7. (This example is not interactive. See Making a
Function Interactive, for that information.)

    (defun multiply-by-seven (number)
      "Multiply NUMBER by seven."
      (* 7 number))

** Interactive Functions

Interactive functions allow you to prompt the user for what each
parameter for a function should be.

(ref:
http://www.gnu.org/savannah-checkouts/gnu/emacs/manual/html_node/elisp/Interactive-Codes.html#Interactive-Codes)

So the following:

```elisp
(defun get-a-string (str)
"print a string"
(interactive "sEnter a string: ")
(message (format "The string you entered is: %s" str)))
```

The `s` in the interactive line: "sEnter... means get a string.  We
can use `n` to get a number.  Notice for each arg, we separate with a
newline character `\n`.

```elisp
(defun get-a-string (str numb)
"print a string"
(interactive "sEnter a string: \nnEnter a number: ")
(message (format "The string you entered is: %s.  10 times your number
is: %d" str (* 10 numb))))
```

```elisp
(defun foo (str bool)
  (interactive
    (list (read-string "Some text: ")
          (y-or-n-p "Do the thing? ")))
  (some-func str)
  (if bool (some-other-func str)))
```
* Debugger

|-----+----------------------------------------------------------------|
| key | effect                                                         |
|-----+----------------------------------------------------------------|
| q   | QUIT debugger                                                  |
| c   | continue execution                                             |
| d   | continue but enter debugger on next function call              |
| b   | flag frame so debugger is entered when frame is exited         |
| u   | cancel 'b'                                                     |
| j   | like b, then c, but don't stop at any other b's, just this one |
| e   | read expression in minibuffer, and print in echo area          |
| R   | like e, but save result                                        |
| l   | list functions that will trigger debugger                      |
| r   | value specied will be return value for frame                   |
|-----+----------------------------------------------------------------|

* Functions as Parameters

Desired:

```
(defun f (x) (+ x 1))

(f 1)
;; 2

(defun x (y) (y 1))

(x f)
;; you could expect "2", but instead get a "void variable" error
```

Correct way:

```
(defun f (x)
  (1+ x))

(defun x (y)
  (funcall y 1))

(x #'f)
```
* Macros

ref: http://www.bookshelf.jp/texi/onlisp/onlisp_8.html

Say we w
   
* lisp editing

ref: http://cl-cookbook.sourceforge.net/emacs-ide.html

Sexp functions

| key   | effect        |
|-------+---------------|
| C-A-f | F.orward      |
| C-A-b | B.ack         |
| C-A-t | T.ranspose    |
| C-A-@ | select        |
| C-A-u | U.p to prev   |
| C-A-d | D.own to next |
|-------+---------------|

;; Put the cursor on the open parens of "(defvar.." and press "C-M-f"
;; and "C-M-b" a few times to see how you move in units of sexps. Put
;; the cursor on the second additon in the "(progn" statement and
;; press "C-M-t" to swap the first addition sexp and the second
;; one. Put the cursor on the open parens of "(+ x" in defun c and
;; press "C-M-@" to highlight the entire sexp. Then press "C-M-u" to
;; expand the selection "upwards" to the enclosing "(let". Pressing
;; "C-M-d" moves to the next enclosed sexp or (if you are at the
;; beginning of a line) to the enclosed sexp on the line: 

(defvar a "a variable")

(defun c ()
  "another function"
  (let ((x 42))
    (+ x
       (+ 2 2)
       (+ 3 3)
       (+ 4 4))))

(progn
  (+ 1 1)
  (+ 2 2)
  (+ 3 3))

(defun b ()
  "a function"
  (+ 2 2))
* w3m

|---------------+-------------------------------|
| key           | effect                        |
|---------------+-------------------------------|
| S             | Google Search                 |
| s             | History                       |
| Q             | Quit                          |
| B             | Back                          |
| TAB / S-TAB   | Next / Prev Anchor            |
| RET           | View this URL                 |
| S-RET         | View URL in new session       |
| SPC/BKSP      | Scroll up/down                |
| g             | goto URL                      |
| G             | Goto URL new session          |
| R             | Reload                        |
| c             | copy page                     |
| T             | Toggle display images         |
| =             | toggle display headers        |
| C-c C-@       | bookmark location IN page     |
| C-c C-v       | return to bookmarked location |
| C-c C-t       | create new Tab                |
| C-c C-w       | kill tab                      |
| C-c C-s       | tab list navigate             |
| C-c C-n/p     | next/previous tab             |
| C-c C-. / C-, | move tab right / left         |
| C-t a         | bookmark all tabs             |
| A-S           | save session                  |
| A-s           | session select                |
|---------------+-------------------------------|

* Bookmarks+

|---------+-----------------------------------------------|
| C-x p L | switch to bkmk file. open load, revert/reload |
| C-u S   | Save As                                       |
| S       | Save                                          |
|---------+-----------------------------------------------|

** Bookmark commands available anywhere

| C-x r l | open bookmark list |
| C-x p m | set bookmark       |

** In Bookmark+ list:

| d | delete  |
| m | mark    |
| x | execute |
| u | unmark  |

Goto (open) Bookmark in...

| ret | this window           |
| o   | other window          |
| C-o | other, dont select    |
| 1   | full window           |
| 2   | and previous bookmark |

  
| S      | Save bkmks to file now   |
| C-u g  | revert from file         |
| C-down | show info, next          |
|        | Show bookmarks with tags |

While in the Bookmark+ list you can type:

    C-x r m

to create a bookmark-list bookmark.  The current sort order, filter,
regexp pattern, title, and omit list are saved as part of the
bookmark. Jumping to such a bookmark restores all of these.

To tag all bookmarks belonging to the tags: 'uf'
OR 'lisp' as 'My Project' do:

    T m * uf RET lisp RET RET   - To mark them
    T > + My Project RET RET    - To tag them (doesn't work!!!)

** Sort Bookmark List

| s r | reverse current sort    |
| s b | last buffer/file access |
| s v | by visit frequency      |

** Omit/Un-omit

| .   | show un-omitted        |
| - S | show only omitted      |
| - > | omit marked            |
| - U | un-omit all (show all) |

** Mark / Unmark

| m     | mark          |
| u     | unmark        |
| t     | toggle marked |
| U RET | unmark all    |

** Tags

| T m ~ + | Mark bkmk's not having any of following tags |
| T m +   | Mark bookmarks that have tag(s)              |
| T > +   | Add tag(s) to marked                         |
| T > -   | Remove tag(s) from marked                    |
| T c     | Copy tags                                    |
| T C-y   | Overwrite tags with copied ones              |
| T q     | Add copied tags                              |
| T S     | Show bookmarks with tags                     |
| T l     | List ALL tags                                |
| T +     | Add tag(s) to bookmark                       |
| T -     | Remove tag(s) from bookmark                  |
| T r     | Rename a tag everywhere                      |

| M-d >   | Open marked files in a Dired buffer          |
| .       | show all bookmarks                           |
| T e     | edit bookmark                                |

‘m’ means mark
‘u’ means unmark
`>’ stands for the marked bookmarks
‘*’ means AND (set intersection; all)
`+’ means OR (set union; some/any)
`~’ means NOT (set complement)


| C-A-x | toggle save temp bookmark |
| r     | rename bkmk               |

** Bookmark-File bookmark

| C-u S   | Save As                         |
| C-x p y | create bkmk to bkmk file        |
| C-x p L | switch to bkmk file. open load  |
| C-x p l | accumulate bkmks from bkmk file |

** Temporary

| C-A-X | Toggle temporary |
** Setup/Config
Enable by putting the following in `~/.emacs`

    (require 'bookmark+)

** Help

| C-h m | Show help |
