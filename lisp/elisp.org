* Debugger

[[http://www.gnu.org/software/emacs/manual/html_node/elisp/Debugger-Commands.html#Debugger-Commands]]

| c   | continue                                              |
| d   | continue until another function is called             |
| b   | stop when current frame exited                        |
| u   | cancel 'b'                                            |
| j   | like 'b', and cancels 'd'                             |
| e   | read expression in minibuffer, proper values          |
| A-: | show value ini debugger                               |
| R   | like 'e', but save value in *Debugger-record* buffer  |
| q   | terminate program being debugged                      |
| r   | return a value from debugger                          |
| l   | list functions that will cause debugger to be entered |

* TAGS

For A-. to work you need a tags file.  Goto home directory and
execute from shell:

    % ctags --languages=lisp -e -R -f TAGS

In `.emacs` put:

    (visit-tags-table "~/TAGS")
  
* Use Cases

Want to leverage 'ido-find-file' to pick a filename.

(setq org-base-path (expand-file-name "~/smcho/time"))

(setq org-default-notes-file-path (format "%s/%s" org-base-path "notes.org")
      todo-file-path              (format "%s/%s" org-base-path "gtd.org")
      journal-file-path           (format "%s/%s" org-base-path "journal.org")
      today-file-path             (format "%s/%s" org-base-path "2010.org"))
* symbols

ref: http://ftp.gnu.org/old-gnu/Manuals/elisp-manual-20-2.5/html_node/elisp_100.html

symbols and variables are synonymous.  

** get values from symbols

| symbolp 'symbol         | is token a symbol               |
| symbol-name 'symbol     | get symbols name                |
| symbol-value 'symbol    | get value of symbol             |
| symbol-function 'symbol | get function attached to symbol |
| symbol-plist 'symbol    | get symbol property list        |
  
** from string do symbol action

| import symbol        | add symbol into obarray                      |
| intern "string"      | use "string" as new symbol in obarray        |
| make-symbol "string" | return uninterned symbol whos name is string |
| intern-soft "string" | get symbol by name, if none return nil       |
| mapatoms function    | calls function on each symbol in obarray     |
| unintern symbol      | remove symbol from obarray                   |
